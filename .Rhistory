return(yint + x * slope)
return(linear(x, get_y_intercept(x1, y1, slope), slope))
}
curve(line_point_slope(x, data_center_x, data_center_y, -0.1), add = TRUE)
line_point_slope = function(x, x1, y1, slope)
{
get_y_intercept =
function(x1, y1, slope)
return(-(x1 * slope) + y1)
linear =
function(x, yint, slope)
return(yint + x * slope)
return(linear(x, get_y_intercept(x1, y1, slope), slope))
}
View(line_point_slope)
line_point_slope(1, 1, 1, 1)
curve(line_point_slope(0, data_center_x, data_center_y, -5), add = TRUE)
curve(line_point_slope(1, data_center_x, data_center_y, -5), add = TRUE)
curve(line_point_slope(x, data_center_x, data_center_y, -5), add = TRUE)
trendline(x, y, model = "line2P", plot = TRUE)
install.packages(trendline)
install.packages("trendline")
trendline(x, y, model "line2P", plot = TRUE)
trendline(x,y)
curve(line_point_slope(x, data_center_x, data_center_y, -0.5), add = TRUE)
curve(line_point_slope(x, data_center_x, data_center_y, -0.01), add = TRUE)
lm(x, dat_habitat$elev, dat_habitat$ba.tot)
lm(y ~ x, data = dat_habitat)
lm(formula = y ~ x, data = dat_habitat)
x = dat_habitat_elev
y = dat_habitat_basal
lm(formula = y ~ x, data = dat_habitat)
curve(x, data_center_x, data_center_y, 0.004003)
rm(x)
rm(y)
curve(x, data_center_x, data_center_y, 0.004003)
curve(line_point_slope(x, data_center_x, data_center_y, 0.004003))
x = dat_habitat$slope
x = dat_habitat_slope
y = dat_habitat_basal
lm(formula = y ~ x, data = dat_habitat)
x = dat_habitat_aspect
y = dat_habitat_basal
lm(formula = y ~ x, data = dat_habitat)
n = 1000
x = seq(from = -6, to = 6, length.out = n)
y = dnorn(x, mean = 0, sd = 1)
install.packages("dnorm")
y = dnorn(x, mean = 0, sd = 1)
y = dnorm(x, mean = 0, sd = 1)
plot(y ~ x, type = "1", ylab = "Probability Density")
plot(x, type = 1, ylab = "Probability Density")
dbinom(0, size = 6, prob = 2/3)
install.packages("pbinom")
pbinom(4, size = 4, prob = 2/3)
pbinom(4, size = 6, prob = 2/3)
pbinom(3, 6, 2/3)
n = 1000
x = seq(from = -6, to = 6, length.out = n)
y dnorm(x, mean = 0, sd = 1)
y = dnorm(x, mean = 0, sd = 1)
plot (y ~ x, type "1", ylab = "Probability Density")
# How many points?
n = 1000
# Create a vector of x-values from -4 to 4:
x = seq(from = -6, to = 6, length.out = n)
# Create the corresponding y-values:
y = dnorm(x, mean = 0, sd = 1)
# plot!
plot(y ~ x, type = "l", ylab = "Probability Density")
x_bin = 0:5
y_bin_2 = dbinom(x_bin, size = 5, prob = 0.4)
barplot(
height = y_bin_2,
# the names to print with each bar:
names.arg = x_bin,
# Tells R to remove space between bars:
space = 0,
ylab = "Pr(x)",
main = "Binomial: n = 5, p = 0.4")
rm(list = ls())
pol_n_predation = 26
pol_n_no_predation = 184
pol_n_total = 210
pol_predation_rate = 0.124
psd_n_predation = 25
psd_n_no_predation = 706
psd_n_total = 731
psd_predation_rate = 0.034
print(
paste0(
"The seed predation rate for Polyscias fulva is: ",
round(pol_predation_rate, digits = 3)))
print(
paste0(
"The seed predation rate for Pseudospondias microcarpa is: ",
round(psd_predation_rate, digits = 3)))
pol = c(26, 184, 210, 0.124)
psd = c(25, 706, 731, 0.034)
matrix(pol, psd, byrow = TRUE, nrow = 2)
pol_psd = c(pol, psd)
seed_pred_table = matrix(pol_psd, byrow = TRUE, nrow = 2)
seed_pred_table
seed_row_names = c("Polyscias fulva (pol)", "Pseudospondias microcarpa (psd)")
seed_col_names = c("Any Taken", "None Taken", "N", "Predation Rate")
rownames(seed_pred_table) = seed_row_names
colnames(seed_pred_table) = seed_col_names
seed_pred_table
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
pol_n_predation = 26
pol_n_no_predation = 184
pol_n_total = 210
pol_predation_rate = 0.124
psd_n_predation = 25
psd_n_no_predation = 706
psd_n_total = 731
psd_predation_rate = 0.034
print(
paste0(
"The seed predation rate for Polyscias fulva is: ",
round(pol_predation_rate, digits = 3)))
print(
paste0(
"The seed predation rate for Pseudospondias microcarpa is: ",
round(psd_predation_rate, digits = 3)))
pol = c(26, 184, 210, 0.124)
psd = c(25, 706, 731, 0.034)
pol_psd = c(pol, psd)
seed_pred_table = matrix(pol_psd, byrow = TRUE, nrow = 2)
seed_col_names = seed_row_names = c("Polyscias fulva (pol)", "Pseudospondias microcarpa (psd)")
seed_row_names = c("Polyscias fulva (pol)", "Pseudospondias microcarpa (psd)")
rownames(seed_pred_table) = seed_row_names
colnames(seed_pred_table) = seed_col_names
cat(letters[sample(26, size = 3, replace = T)], sep = "")
cat(letters[sample(26, size = 3, replace = T)], sep = "")
cat(letters[sample(26, size = 3, replace = T)], sep = "")
cat(letters[sample(26, size = 3, replace = T)], sep = "")
cat(letters[sample(26, size = 3, replace = T)], sep = "")
cat(letters[sample(26, size = 3, replace = T)], sep = "")
cat(letters[sample(26, size = 3, replace = T)], sep = "")
cat(letters[sample(26, size = 3, replace = T)], sep = "")
cat(letters[sample(26, size = 3, replace = T)], sep = "")
cat(letters[sample(26, size = 3, replace = T)], sep = "")
cat(letters[sample(26, size = 3, replace = T)], sep = "")
cat(letters[sample(26, size = 3, replace = T)], sep = "")
cat(letters[sample(26, size = 3, replace = T)], sep = "")
cat(letters[sample(26, size = 3, replace = T)], sep = "")
cat(letters[sample(26, size = 3, replace = T)], sep = "")
cat(letters[sample(26, size = 3, replace = T)], sep = "")
cat(letters[sample(26, size = 3, replace = T)], sep = "")
cat(letters[sample(26, size = 3, replace = T)], sep = "")
cat(letters[sample(26, size = 3, replace = T)], sep = "")
cat(letters[sample(26, size = 3, replace = T)], sep = "")
cat(letters[sample(26, size = 3, replace = T)], sep = "")
cat(letters[sample(26, size = 3, replace = T)], sep = "")
cat(letters[sample(26, size = 3, replace = T)], sep = "")
cat(letters[sample(26, size = 3, replace = T)], sep = "")
qnorm(c(0.025, 0.975))
dpois(x = 2, lambda = 4.5)
dpois(x = 6, lambda = 4.5)
wiwa_counts = c(2, 6)
dpois(wiwa_counts, lambda = 4.5)
prod(dpois(x = wiwa_counts, lambda = 4.5))
sum(log(dpois(x = wiwa_counts, lambda = 4.5)))
sum(log(dpois(x = wiwa_counts, lambda = 4.2)))
dat_bird = read.csv(here::here("data", "bird.sta.csv")
dat_bird = read.csv(here::here("data", "bird.sta.csv"))
dat_bird = read.csv(here::here("data", "bird.sta.csv"))
dat_habitat = read.csv(here::here("data", "hab.sta.csv"))
dat_all = merge(dat_bird, dat_habitat)
summary(dat_all$WIWA)
wiwa_counts = c(2, 6)
llk_wiwa = function(lambda)
{}
{
return(sm(log(dpois(wiwa_counts, lambda = ))))
}
dpois(x = wiwa_counts, lambda = 4.1)
dpois(x = wiwa_counts, lambda = 3.8)
dpois(x = wiwa_counts, lambda = 4)
dpois(x = wiwa_counts, lambda = 4.15)
sum(dpois(x = wiwa_counts, lambda = 1))
hist(dat_all$WIWR)
hist(dat_all$WIWR, breaks 0:5)
hist(dat_all$WIWR, breaks = 0:5)
hist(dat_all$WIWR, breaks = 0:6)
hist(dat_all$WIWR, breaks = 0:7)
hist(dat_all$WIWR, breaks = 0:7 - 0.5)
View(llk_wiwa)
sum(dpois(x = dat_all$WIWR, lambda = 1.5))
sum(dpois(x = dat_all$WIWR, lambda = 1))
sum(dpois(x = dat_all$WIWR, lambda = 2))
sum(log(dpois(x = bird$WIWR, lambda1.5)))
sum(log(dpois(x = dat_bird$WIWR, lambda = 1.5)))
sum(log(dpois(x = dat_bird$WIWR, lambda = 1)))
sum(log(dpois(x = dat_bird$WIWR, lambda = 2)))
dbinom(size = 4, prob = 0.75)
dbinom(3, size = 4, prob = 0.75)
pbinom(3, size = 4, prob = 0.75)
1 - pbinom(3, size = 4, prob = 0.75)
pnorm(1.2, mean = 2, sd = 2)
1 - pnorm(1.2, mean = 2, sd = 2)
pnorm(3.2, mean = 2, sd = 2) - pnorm(1.2, mean = 2, sd = 2)
25^3
set.seed(1)
vec_rnorm = rnorm(n = 10, mean = 0, sd = 1)
logLik(vec_norm)
set.seed(1)
vec_rnorm = rnorm(n = 10, mean = 0, sd = 1)
loglik(vec_rnorm)
install.packages(loglik)
install.packages("loglik")
loglik(vec_rnorm)
logLik(vec_rnorm)
require(palmerpenguins)
dat_ade = droplevels(subset(penguins, species == "Adelie"))
hist(dat_ade$body_mass_g, main = "Adelie Penguins: Body Mass", xlab = "body mass (g)")
boxplot(dat_ade)
boxplot(dat_ade ~ "sex")
boxplot(dat_ade, ~ "sex")
t.test(dat_ade$body_mass_g, y = NULL, alternative = c("two.sided", "less", mu = 0, paired = FALSE, var.equal = FALSE, conf.level = 0.95))
dat_ade_f = droplevels(subset(dat_ade, sex == "female"))
t.test(x = dat_ade_f$body_mass_g, mu = 0)
dat_ade_m = droplevels(subset(dat_ade, sex == "male")
dat_ade_m = droplevels(subset(dat_ade, sex == "male"))
dat_ade_m = droplevels(subset(dat_ade, sex == "male"))
t.test(x = dat_ade_f$body_mass_g,
y = dat_ade_m$body_mass_g)
knitr::opts_chunk$set(echo = TRUE)
fit_species =
lm(
Sepal.Length ~ Species,
data = iris)
plot(fit_species)
plot(fit_species)
Call:
## lm(formula = Sepal.Length ~ Species, data = iris)
##
## Residuals:
##     Min      1Q  Median      3Q     Max
## -1.6880 -0.3285 -0.0060  0.3120  1.3120
##
## Coefficients:
##                   Estimate Std. Error t value Pr(>|t|)
## (Intercept)         5.0060     0.0728  68.762  < 2e-16 ***
## Speciesversicolor   0.9300     0.1030   9.033 8.77e-16 ***
## Speciesvirginica    1.5820     0.1030  15.366  < 2e-16 ***
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
##
## Residual standard error: 0.5148 on 147 degrees of freedom
## Multiple R-squared:  0.6187, Adjusted R-squared:  0.6135
## F-statistic: 119.3 on 2 and 147 DF,  p-value: < 2.2e-16
plot(
Petal.Width ~ Petal.Length,
data = iris,
xlab = "Petal Length (cm)",
ylab = "Petal Width (cm)")
plot(
Petal.Width ~ Petal.Length,
data = iris,
xlab = "Petal Length (cm)",
ylab = "Petal Width (cm)")
fit_petals = plot(
Petal.Width ~ Petal.Length,
data = iris,
xlab = "Petal Length (cm)",
ylab = "Petal Width (cm)")
mean(iris$Sepal.Length)
summary(iris)
iris
mean(iris$Sepal.Length)
mean(iris$Sepal.Length)
boxplot(iris$sepal.length ~ species)
bosplot(iris$sepal.length ~ "Species")
boxplot(iris$Sepal.Length ~ species)
boxplot(iris$Sepal.Length ~ Species)
boxplot(iris$Sepal.Length ~ "Species")
subset(iris$Species)
subset(iris, Species,)
droplevels(subset(iris, Species == "setosa"))
iris_set = droplevels(subset(iris, Species == "setosa"))
mean(iris_set)
mean(iris_set$Sepal.Length)
iris_virg = droplevels(subset(iris, Species == "virginica"))
mean(iris_virg$Sepal.Length)
iris_vers = droplevels(subset(iris, Species == "Versicolor"))
iris_vers = droplevels(subset(iris, Species == "versicolor"))
boxplot(iris_set$Sepal.Length, iris_vers$Sepal.Length, iris_virg$Sepal.Length)
iris_set = droplevels(subset(iris, Species == "setosa"))
iris_virg = droplevels(subset(iris, Species == "virginica"))
iris_vers = droplevels(subset(iris, Species == "versicolor"))
boxplot(iris_set$Sepal.Length, iris_vers$Sepal.Length, iris_virg$Sepal.Length,
main = "Boxplot of Sepal Length Dependent on Species",
xlab = "Species",
ylab = "Sepal Length")
sepal_species = boxplot(iris_set$Sepal.Length, iris_vers$Sepal.Length, iris_virg$Sepal.Length,
+         main = "Boxplot of Sepal Length Dependent on Species",
residuals(iris_set$Sepal.Length)
shapiro.test(residuals(iris_set, iris_vers, iris_virg))
shapiro.test(residuals(iris$Sepal.Length))
lm(iris)
lm(formula = iris$Sepal.Length)
lm(iris$Petal.Length)
plot(
Petal.Width ~ Petal.Length,
)
plot(
Petal.Width ~ Petal.Length
data = iris
plot(Petal.Width ~ Petal.Length,)
plot(
Petal.Width ~ Petal.Length,
data = iris,
xlab = "Petal Length (cm)",
)
plot(
Petal.Width ~ Petal.Length,
data = iris,
xlab = "Petal Length (cm)",
ylab = "Petal Width (cm)"
)
catrate = data.frame(read.csv(here("data", "catrate.csv"))
a
catrate = read.csv(here("data", "catrate.csv"))
install.packages("here)")
catrate = read.csv(here("data", "catrate.csv"))
require("here")
catrate = read.csv(here("data", "catrate.csv"))
head(catrate)
summary(catrate)
hist(catrate ~ cat.rate)
hist(catrate)
hist(catrate$cat.rate)
hist(catrate$cat.rate,
main = "Histogram of Catastrophe Rates",
xlab = "Catastrophe Rate",
ylab = "Frequency")
shapiro.test(catrate$cat.rate)
install.packages("nortest")
ad.test(catrate$cat.rate)
install.packages("ad.test")
library(nortest)
ad.test(catrate$cat.rate)
lillie.test(catrate$cat.rate)
t.test(0.28, 0.54)
t.test(catrate$cat.rate, x = 0.28, mu = 0.54)
t.test(catrate$cat.rate)
t.test(0.28, y = NULL, alternative = "two.sided", mu = 0.54)
t.test(catrate$cat.rate, 0.28, 0.54)
t.test(x = catrate$cat.rate, mu = 0.54)
catrate
average(catrate$success)
mean(catrate$success)
catrate$success / catrate$years
freq_late_fill = 1 - catrate$success / catrate$years
mean(freq_late_fill)
mean(catrate$cat.rate)
t.test(x = catrate$cat.rate, mu = 0.54)
t.test(x = catrate$cat.rate, mu = 0.28)
t.test(x = catrate$cat.rate, mu = 0.2857143)
knitr::opts_chunk$set(echo = TRUE)
require("here")
catrate = read.csv(here("data", "catrate.csv"))
head(catrate)
summary(catrate)
#Histogram of Catastrophe Rates
hist(catrate$cat.rate,
main = "Histogram of Catastrophe Rates",
ylab = "Catastrophe Rate",
xlab = "Frequency")
#Checking for Normality - Shapiro Test
shapiro.test(catrate$cat.rate)
#Other Normality Tests
install.packages("nortest")
library(nortest)
ad.test(catrate$cat.rate)
lillie.test(catrate$cat.rate)
#One-Sample Test - Parametric One-Sample Test: The t-test
t.test(x = catrate$cat.rate, mu = 0.2857143)
install.packages("nortest")
knitr::opts_chunk$set(echo = TRUE)
require("here")
catrate = read.csv(here("data", "catrate.csv"))
head(catrate)
summary(catrate)
#Histogram of Catastrophe Rates
hist(catrate$cat.rate,
main = "Histogram of Catastrophe Rates",
ylab = "Catastrophe Rate",
xlab = "Frequency")
#Checking for Normality - Shapiro Test
shapiro.test(catrate$cat.rate)
#Other Normality Tests
install.packages("nortest")
library(nortest)
ad.test(catrate$cat.rate)
lillie.test(catrate$cat.rate)
#One-Sample Test - Parametric One-Sample Test: The t-test
t.test(x = catrate$cat.rate, mu = 0.2857143)
knitr::opts_chunk$set(echo = TRUE)
require("here")
catrate = read.csv(here("data", "catrate.csv"))
head(catrate)
summary(catrate)
#Histogram of Catastrophe Rates
hist(catrate$cat.rate,
main = "Histogram of Catastrophe Rates",
ylab = "Catastrophe Rate",
xlab = "Frequency")
#Checking for Normality - Shapiro Test
install.packages("shapiro.test")
shapiro.test(catrate$cat.rate)
#Other Normality Tests
install.packages("nortest")
library(nortest)
ad.test(catrate$cat.rate)
lillie.test(catrate$cat.rate)
#One-Sample Test - Parametric One-Sample Test: The t-test
t.test(x = catrate$cat.rate, mu = 0.2857143)
install.packages("nortest")
shapiro.test(catrate$cat.rate)
t.test(catrate$cat.rate, mu = 0.2857143, alternative = "greater")
wilcox.test(catrate$cat.rate, mu = 2/7)
wilcox.test(catrate$cat.rate, mu = 2/7, alternative = "greater")
require(palmerpenguins)
penguin_dat = droplevels(subset(penguins, species != "Gentoo"))
summary(penguin_dat)
boxplot(
flipper_length_mm ~ species,
data = penguin_dat,
ylab = "Flipper Length (mm)")
dat_adelie = subset(penguin_dat, species == "Adelie")
dat_chinstrap = subset(penguin_dat, species == "Chinstrap")
shapiro.test(dat_adelie$flipper_length_mm)
shapiro.test(dat_chinstrap$flipper_length_mm)
t.test(x = flipper_length_mm ~ species,
data = penguin_dat)
t.test(flipper_length_mm ~ species,
data = penguin_dat)
wilcox.test(flipper_length_mm ~ species,
data = penguin_dat)
levels(penguin_dat$species)
shapiro.test(catrate$cat.rate)
t.test(x = catrate$cat.rate, mu = 0.2857143)
wilcox.test(catrate$cat.rate, mu = 2/7)
wilcox.test(catrate$cat.rate, mu = 2/7, exact = FALSE)
dat_adelie = subset(penguin_dat, species == "Adelie")
shapiro.test(dat_adelie$flipper_length_mm)
dat_chinstrap = subset(penguin_dat, species == "Chinstrap")
shapiro.test(dat_chinstrap$flipper_length_mm)
par(mfrow = c(3,1))
hist(dat_habitat$elev,
main = "Elevation Histogram",
xlab = "Elevation (m)",
ylab = "Frequency")
hist(dat_adelie$flipper_length_mm,
main = "Adelie Flipper Length")
,
par(mfrow = c(1,2))
hist(dat_adelie$flipper_length_mm,
main = "Adelie Flipper Length",
xlab = "Length",
ylab = "Frequency")
par(mfrow = c(1,2),
length = 10,
width = 10)
hist(dat_adelie$flipper_length_mm,
main = "Adelie Flipper Length",
xlab = "Flipper Length",
ylab = "Frequency")
hist(dat_chinstrap$flipper_length_mm,
main = "Chinstrap Flipper Length",
xlab = "Flipper Length",
ylab = "Frequency")
par(mfrow = c(1,2),
length = 5,
width = 10)
hist(dat_adelie$flipper_length_mm,
main = "Adelie Flipper Length",
xlab = "Flipper Length",
ylab = "Frequency")
hist(dat_chinstrap$flipper_length_mm,
main = "Chinstrap Flipper Length",
xlab = "Flipper Length",
ylab = "Frequency")
par(mfrow = c(1,2),,
width = 10)
par(mfrow = c(1,2),
plot(1, main = 1),
plot(2, main = 2))
hist(dat_adelie$flipper_length_mm,
main = "Adelie Flipper Length",
xlab = "Flipper Length",
ylab = "Frequency")
hist(dat_chinstrap$flipper_length_mm,
main = "Chinstrap Flipper Length",
xlab = "Flipper Length",
ylab = "Frequency")
t.test(flipper_length_mm ~ species,
data = penguin_dat)
read.csv(here("data", "ginkgo_data_2022"))
install.packages("here")
require("here")
read.csv(here("data", "ginkgo_data_2022"))
read.csv(here("data", "ginkgo_data_2022.csv"))
ginkgo_data = read.csv(here("data", "ginkgo_data_2022.csv"))
droplevels(subset(ginkgo_data, seeds_present == "FALSE"))
no_seeds = droplevels(subset(ginkgo_data, seeds_present == "FALSE"))
boxplot(no_seeds$site_id)
boxplot(ginkgo_data$seeds_present)
